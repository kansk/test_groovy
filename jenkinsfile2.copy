/***********************************************************************
                         Aricent Technologies Proprietary
 
This source code is the sole property of Aricent Technologies. Any form of utilization
of this source code in whole or in part is  prohibited without  written consent from
Aricent Technologies
 
File Name			  :Jenkinsfile
Principal Author	  :PRAVEEN KUMAR KRISHNAMOORTHY
Subsystem Name        :Jenkins Pipeline Study
Module Name           :
Date of First Release : Feb 25, 2017
Author                :PRAVEEN KUMAR KRISHNAMOORTHY
Description           :This is a sample program to study Continous Integration
Version               :1.0
Date(DD/MM/YYYY)      :Feb 25, 2017
Modified by           : PRAVEEN KUMAR KRISHNAMOORTHY
Description of change :Forked From 
 
***********************************************************************/
//TODO - Make SVN and GIT Checkout steps perfect with Jenkins way. Do not use Shell way.

node {
  echo "Parameter List"
  echo "SCM Type    : ${scmSourceRepo}"
  echo "SCM Path    : ${scmPath}"
  echo "SCM User    : ${scmUsername}"
  echo "SCM Pass    : ${scmPassword}"
  echo "HTTP Proxy  : ${httpProxy}"
  echo "HTTPS Proxy : ${httpsProxy}"

//------------------------------------------------
//To escape all Special Charecters in a given input string Username
  def pwdstr = scmPassword
  def usrstr = scmUsername
  scmPassword = pwdstr.replaceAll( /([^a-zA-Z0-9])/, '\\\\$1' )
  scmUsername = usrstr.replaceAll( /([^a-zA-Z0-9])/, '\\\\$1' )
//To escape all Special Charecters in a given input string Username  
  def pwdstr2 = scmPassword
  def usrstr2 = scmUsername
  scmPassword = pwdstr2.replaceAll( /([@])/, '%40' )
  scmUsername = usrstr2.replaceAll( /([@])/, '%40' ) 
//----------------------------------------
  stage('Code Pickup')
  {
    echo "Source Code Repository Type : ${scmSourceRepo}"
    echo "Source Code Repository Path : ${scmPath}"
    
    if("${scmSourceRepo}".toUpperCase()=='SVN')
    {
       sh "svn co --username ${scmUsername} --password ${scmPassword} ${scmPath} ."
        
    }
    else if("${scmSourceRepo}".toUpperCase()=='GIT' || "${scmSourceRepo}".toUpperCase()=='GITHUB')
    {
      if(scmPath.startsWith("ssh://"))
        {
            scmPath = scmPath.substring(0, scmPath.indexOf("//")+2) + scmUsername + "@" +scmPath.substring(scmPath.indexOf("//")+2, scmPath.length());
        } else
        {
            scmPath = scmPath.substring(0, scmPath.indexOf("//")+2) + scmUsername + ":" + scmPassword + "@" +scmPath.substring(scmPath.indexOf("//")+2, scmPath.length());
        }
      echo "GIT PATH: ${scmPath}"
      try {
          //If we use git clone, it will not clone in the same path if we rebuild the pipeline
          sh 'ls -a | xargs rm -fr'
          } catch (error)
          {
          } 
      
      if(scmPath.startsWith("ssh://"))
          {
            if(httpsProxy != null && httpProxy!=null && httpsProxy.length()>0 && httpProxy.length()>0)
            {
              echo "Looks like this Jenkins behind Proxy"
              sh "export https_proxy=${httpsProxy} && export http_proxy=${httpProxy} && sshpass -p ${scmPassword}   git clone ${scmPath} ."
            } else
            {
              echo "Looks like this Jenkins is not behind Proxy"
              sh "sshpass -p ${scmPassword}   git clone ${scmPath} ."
            }            
           } 
      else
           {
              if(httpsProxy != null && httpProxy!=null && httpsProxy.length()>0 && httpProxy.length()>0)
            {
              echo "Looks like this Jenkins behind Proxy"
              sh "export https_proxy=${httpsProxy} && export http_proxy=${httpProxy} && git clone ${scmPath} ."
            } 
            else
            {
              echo "Looks like this Jenkins is not behind Proxy"
              sh "git clone ${scmPath} ."
            }            
           } 
    }
    else
    {
      error 'Unknown Source code repository. Only GIT and SVN are supported'
    }
  } 
//--------------------------------------  
// INITIALIZING
  stage ('Initialization')
{
def appModuleSeperated = fileExists 'app'
def testModuleSeperated = fileExists 'test'
def appPath = ''
def testPath = ''
if (appModuleSeperated) {
    echo 'App Module is found , assumed that application is present in /app directory'
    appPath='app/'
} else {
    echo 'There is no defined Application path , hence it is assumed that application is in current directory'
    appPath = ''
}

if (testModuleSeperated) {
    echo 'Test Module is found , assumed that Test Cases are Present for the concerned Modules and has to be performed'
    testPath = 'test/'
} else {
    echo 'No Test Modules found , hence it is assumed that no test environment and / or test cases to be performed'
    testPath = ''
}
  if (appPath + fileExists("${FileName}")) {
    echo "Packer file found at ${appPath}"
    PackerFile = appPath + "${FileName}"
} else {
    echo 'Packerfile not found under ' + appPath
  }
// COPYING APP Directory to Current Working Directory
  def appWorkingDir = (appPath=='') ? '.' : appPath.substring(0, appPath.length()-1)  
 
}
//END OF INITIALIZING.
//_______________________________________________________________________________________________________________________________________________________________________  
//BUILD & PACKING
  //---------------------------------------
//    echo 'The Requested Stage is Build Only,hence successful VM Images will be pushed to Temp Repo'
//   stage('EXECUTE')
//      {
//        echo "Running Groovy Script on :${PackerFile}"
//        def rootDir = pwd()
//        def object  = load "${rootDir}@script/main.groovy"
//        def object  = load "main.groovy"
//        object.method()          
//      }

method()
}

import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
def method () {
def fileName = "/var/jenkins_home/workspace/test_groovy_2/packer.json"
File f = new File('/var/jenkins_home/workspace/test_groovy_2/template.json')
def slurped = new JsonSlurper().parseText(f.text)
def builder = new JsonBuilder(slurped)

builder.content.builders[0].image_name = 'Aricent_Image_1'

def inputFile = new File(fileName)
if(inputFile.exists())
{
 Println("A file named " + fileName + " already exisits in the same folder")
}
else
{
 inputFile.write(builder.toPrettyString())
 println("The Content Written to the file " + fileName + "is")
 println(builder.toPrettyString())
}
}
